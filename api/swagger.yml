swagger: "2.0"
info:
  description: Simple API to perform CRUD operations to the Characters database
  version: "1.0"
  title: Characters API
consumes:
  - application/json
produces:
  - application/json

basePath: /api

paths:
  /character:
    get:
      operationId: api.characters.read_all_characters
      tags: [Character]
      summary: Get all Characters
      responses:
        200:
          description: List of all Characters
          schema:
            type: object
            properties:
              characters:
                type: object
                items:
                  $ref: '#/definitions/Character'
        204:
          description: No characters found
    post:
      operationId: api.characters.create_character
      tags: [Character]
      summary: Create a new Character
      parameters:
        - name: character_data
          in: body
          schema:
            $ref: '#/definitions/Character'
      responses:
        201:
          description: New character created
        400:
          description: Error creating character

  /character/{character_id}:
    get:
      operationId: api.characters.read_character
      tags: [Character]
      summary: Get a Character
      parameters:
        - $ref: '#/parameters/character_id'
      responses:
        200:
          description: Definition of a Character identified by its id
          schema:
            type: object
            properties:
              characters:
                type: object
                items:
                  $ref: '#/definitions/Character'
        404:
          description: Character does not exist
    put:
      tags: [Character]
      operationId: api.characters.update_character
      summary: Update a character
      parameters:
        - $ref: '#/parameters/character_id'
        - name: character_data
          in: body
          schema:
            $ref: '#/definitions/Character'
      responses:
        201:
          description: Character updated
        400:
          description: Error updating character
    delete:
      tags: [Character]
      operationId: api.characters.delete_character
      summary: Remove a character
      parameters:
        - $ref: '#/parameters/character_id'
      responses:
        200:
          description: Character was deleted
        404:
          description: Character does not exists

parameters:
  character_id:
    name: character_id
    description: Character's Unique identifier
    in: path
    type: string
    required: true
    pattern: "^[0-9]+$"

definitions:
  Character:
    type: object
    required:
      - name
      - place_id
      - king
    properties:
      name:
        type: string
        description: Character's unique name
        example: "Jon"
        minLength: 1
        maxLength: 100
      place_id:
        type: string
        description: Character's place id
        example: 3
        pattern: "^[0-9]+$"
      king:
        type: boolean
        description: If a character is the king of the place
        example: false
      alive:
        type: boolean
        description: If a character ir alive(true) or dead(false). If not set, defaults to dead
        example: false